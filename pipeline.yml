trigger:
  - main

pr:
  - main

pool:
  vmImage: ubuntu-latest

stages:
  - stage: ci
    displayName: build
    jobs:
      - job: ci1
        steps:
          - checkout: self
            fetchDepth: 0
            fetchTags: true
          - pwsh: |
              Install-Module AzPipelineVariable -Force
          - script: curl https://raw.githubusercontent.com/gembaadvantage/uplift/main/scripts/install | bash
            displayName: install uplift
          - pwsh: |
              $isMainBranch = $Env:BUILD_SOURCEBRANCHNAME -eq 'main'
              $buildReason = $Env:BUILD_REASON
              $nextVersion = uplift tag --next --silent --no-prefix --ignore-detached

              "$nextVersion" | Set-AzPipelineVariable version -Output -Verbose
              ($null -ne $nextVersion) -and $isMainBranch -and ($buildReason -in 'IndividualCI','Manual')
              | Set-AzPipelineVariable trigger -Output -Verbose
            name: release
            displayName: check if release should be triggered
          - pwsh: .\Build.ps1 -Version '$(release.version)'
            displayName: build module
          - publish: ./output
            artifact: module
            displayName: publish module artifact
  - stage:
    displayName: publish
    condition: and(succeeded(), eq(dependencies.ci.outputs['ci1.release.trigger'], 'True'))
    variables:
      version: $[stageDependencies.ci.ci1.outputs['release.version']]
    jobs:
      - deployment:
        displayName: publish module
        environment: psgallery
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  fetchDepth: 0
                  fetchTags: true
                  persistCredentials: true
                - pwsh: |
                    $nextVersion = uplift tag --next --silent --no-prefix --ignore-detached
                    if ($nextVersion -ne $VERSION) {
                      throw 'Concurrency error. Bailing out.'
                    }
                - download: current
                  artifact: module
                  displayName: download module artifact
                - script: curl https://raw.githubusercontent.com/gembaadvantage/uplift/main/scripts/install | bash
                  displayName: install uplift
                - script: echo "publish module to PSGallery"
                  displayName: publish module
                - script: |
                    git tag v$(version)
                    git push origin v$(version)
                  displayName: tag release
                  workingDirectory: $(Build.SourcesDirectory)
                - script: |
                    git switch main
                    uplift changelog
                  workingDirectory: $(Build.SourcesDirectory)